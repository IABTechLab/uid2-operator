name: UID2 Scheduled Workflow Status Summary

on:
  schedule:
    - cron: '0 16 * * *'  # 9:00 AM GMT -7
    - cron: '0 0 * * *'   # 5:00 PM GMT -7
  workflow_dispatch:
  push:

jobs:
  check-status:
    runs-on: ubuntu-latest

    env:
      WORKFLOWS: |
        IABTechLab/uid2-operator:publish-all-operators.yaml
        IABTechLab/uid2-operator:vulnerability-scan-failure-notify.yaml

    steps:
      - name: Check workflows and format Slack message
        id: gather
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CROSS_REPO_PAT }}
          script: |
            const workflows = process.env.WORKFLOWS.trim().split('\n');
            let summary = "*üìã UID2 Scheduled Workflow Summary:*\n";

            for (const wf of workflows) {
              const [fullRepo, workflowFile] = wf.trim().split(":");
              const [owner, repo] = fullRepo.trim().split("/");

              console.log(`üîç Checking ${owner}/${repo} ‚Äì ${workflowFile}`);

              try {
                // Try to fetch the human-readable workflow name
                let workflowName = workflowFile;
                try {
                  const { data: workflowMeta } = await github.rest.actions.getWorkflow({
                    owner,
                    repo,
                    workflow_id: workflowFile.trim()
                  });
                  workflowName = workflowMeta.name;
                } catch (metaErr) {
                  console.warn(`‚ö†Ô∏è Could not fetch workflow name for ${workflowFile}: ${metaErr.message}`);
                }

                // Fetch workflow runs
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id: workflowFile.trim(),
                  per_page: 10,
                });

                const run = runs.workflow_runs.find(r => r.event === 'schedule');

                if (run) {
                  const status = run.conclusion === 'success' ? '‚úÖ Success' :
                                 run.conclusion === 'failure' ? '‚ùå Failed' :
                                 `‚ö†Ô∏è ${run.conclusion}`;
                  summary += `‚Ä¢ *${workflowName}* ‚Äì \`${workflowFile}\` - ${status} (<${run.html_url}|view>)\n`;
                } else {
                  summary += `‚Ä¢ *${workflowName}* ‚Äì \`${workflowFile}\` - ‚ö†Ô∏è No scheduled run found\n`;
                }

              } catch (err) {
                summary += `‚Ä¢ \`${repo}/${workflowFile}\` - ‚ùó Error: ${err.message}\n`;
              }
            }

            core.setOutput("summary", summary);

      - name: Print summary
        run: echo "${{ steps.gather.outputs.summary }}"
